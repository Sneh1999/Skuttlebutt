diff --git a/index.js b/index.js
index d868233..d3b4782 100644
--- a/index.js
+++ b/index.js
@@ -67,7 +67,7 @@ var isInvalidShape = exports.isInvalidShape = function (msg) {
   //we will fix at some point...
   var asJson = encode(msg)
   if (asJson.length > 8192) // 8kb
-    return new Error( 'encoded message must not be larger than 8192 bytes')
+    return new Error('encoded message must not be larger than 8192 bytes')
 
   return isInvalidContent(msg.content)
 }
@@ -78,6 +78,12 @@ function fatalError(msg) {
   return err
 }
 
+function warningError(msg) {
+  var err = new Error(msg)
+  err.warning = true
+  return err
+}
+
 function nonFatalError(msg) {
   return new Error(msg)
 }
@@ -97,7 +103,7 @@ exports.checkInvalidCheap = function (state, msg) {
       return nonFatalError('state must have timestamp property, on feed:'+msg.author)
     //if the timestamp doesn't increase, they should have noticed at their end.
     if(msg.timestamp <= state.timestamp)
-      return nonFatalError('invalid message: timestamp not increasing, on feed:'+msg.author)
+      return warningError('invalid message: timestamp not increasing, on feed:'+msg.author)
     //if we have the correct sequence and wrong previous,
     //this must be a fork!
     if(msg.previous != state.id)
@@ -161,9 +167,9 @@ function flatState (fstate) {
 }
 
 exports.append = function (state, hmac_key, msg) {
-  var err
   var _state = flatState(state.feeds[msg.author])
-  if(err = exports.checkInvalid(_state, hmac_key, msg))
+  var err = exports.checkInvalid(_state, hmac_key, msg)
+  if(err && !err.warning)
     throw err
 
   else if(state.feeds[msg.author]) {
diff --git a/test/error.js b/test/error.js
index 96d9706..3d07b37 100644
--- a/test/error.js
+++ b/test/error.js
@@ -75,8 +75,7 @@ function test (hmac_key) {
 
   })
 
-
-  tape('invalid - rewind', function (t) {
+  tape('timestamp - rewind append ok', function (t) {
 
     var last = state.queue[9]
       var m = v.create({
@@ -88,12 +87,11 @@ function test (hmac_key) {
 
     try {
       state = v.append(state, hmac_key, m)
-      t.fail('should have thrown')
     } catch (err) {
-      t.notEqual(err.fatal, true)
-      t.end()
+      t.fail('should not thrown')
     }
 
+    t.end()
   })
 
   tape('create with invalid date', function (t) {
